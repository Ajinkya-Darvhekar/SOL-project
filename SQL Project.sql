CREATE TABLE Books (
	Book_id SERIAL PRIMARY KEY,
	Title VARCHAR(100),
	Author VARCHAR(100),
	Genre VARCHAR(100),
	published_year INT,
	price NUMERIC(10,2),
	stock INT
);

DROP TABLE IF EXISTS Customers
CREATE TABLE Customers(
	Customer_id SERIAL PRIMARY KEY,
	Name VARCHAR(100),
	Email VARCHAR(100),
	phone VARCHAR(15),
	City VARCHAR(50),
	Country VARCHAR(150)
);


DROP TABLE IF EXISTS Orders 
CREATE TABLE Orders(
	Order_Id SERIAL PRIMARY KEY,
	Custmor_Id INT REFERENCES Customers(Customer_id),
	Book_Id INT REFERENCES Books(Book_id),
	Order_date DATE,
	Quantity INT,
	Total_Amount NUMERIC(10,2)
);

SELECT * FROM Books
SELECT * FROM Customers
SELECT * FROM Orders

-- Retrieve all the books of 'Fiction' genre
SELECT * FROM Books
WHERE genre='Fiction';

-- 2) select published after 1950
SELECT * FROM Books
WHERE published_year > 1950;

-- 3) Select customers From canada
SELECT * FROM Customers
WHERE country='Canada';

-- 4) show order placed in Novenber 2023
SELECT * FROM Orders
WHERE order_date BETWEEN '2023-11-01' AND '2023-11-30';

-- 5) Retieve the total stock of books available
SELECT SUM(stock) AS total_stock
FROM Books;
-- with title,price, stock
SELECT title,price,stock,
	SUM(stock) OVER() AS TOTAL_STCOK
	FROM Books;

-- 6)find the detail most expensive book
SELECT * FROM Books
ORDER BY price DESC
LIMIT 1;

-- 7) sow all custmoers who order more than 1 
SELECT * FROM Orders
WHERE quantity > 1;

-- 8) retrieve all orders where the total amount excereds $20
SELECT * FROM Orders
WHERE total_amount > 20.00;

-- 9) list all genre in books table
SELECT DISTINCT genre
FROM Books;

-- 10)find the book with lowest stock
SELECT * FROM Books
ORDER BY stock ASC
LIMIT 1;

-- 11) calculate total revenue generated by order table
SELECT SUM(total_amount) AS revenue
 FROM Orders;

-- Advancve Quation

-- 1) retieve total number of book sold for each genre
SELECT b.genre, SUM(o.Quantity) AS total_book_sold
FROM Orders o
JOIN Books b ON b.book_id = o.book_id
GROUP BY b.genre;

-- 2) Find the average price of book in the 'fantancy' genre
SELECT AVG(price) AS average_price
FROM Books
WHERE genre='Fantasy';

-- 3)List customer who have placed at least 2 order
SELECT o.custmor_id, c.name, COUNT(o.order_id) AS ORDER_COUNT
FROM Orders o
JOIN 
Customers c ON o.custmor_id = c.customer_id
GROUP BY o.custmor_id, c.name
HAVING COUNT(Order_id) >=2;

-- 4) Find the most frequently order book
SELECT o.book_id, b.title, COUNT(o.order_id) AS order_count
FROM Orders o
JOIN
Books b ON o.book_id=b.book_id
GROUP BY o.book_id,b.title
ORDER BY order_count DESC 
LIMIT 1;

-- 5) show top 3 most expensive book from fantasy genre
SELECT * FROM Books
WHERE genre='Fantasy'
ORDER BY price DESC
LIMIT 3;

-- 6) Retrieve the total quantity of book sold by each uthor
SELECT b.author, SUM(o.quantity) AS total_quantity_sold
FROM orders o
JOIN
books b
ON o.book_id = b.book_id
GROUP BY b.author;

-- 7) Lists the cities where custmores who spent over $30 are located
SELECT DISTINCT c.city, o.total_amount
FROM Customers c
JOIN
orders o 
ON c.customer_id = o.custmor_id
WHERE o.total_amount > 30;

-- 8) find the custmors who spend the most on orders
SELECT c.customer_id, C.Name, SUM(o.total_amount) AS total_spent
FROM orders o
JOIN
Customers c ON o.custmor_id = c.Customer_id 
GROUP BY c.customer_id, c.Name
ORDER BY total_spent DESC ;

-- 9) calculate the stock remaining after fulfilling all orders
SELECT b.book_id, b.title,b.stock,
COALESCE (SUM (o.quantity),0) AS order_quantity,
b.stock-COALESCE (SUM (o.quantity),0) AS remaining_quantity
FROM books b
LEFT JOIN
orders o
on b.book_id = o.book_id
GROUP BY b.book_id;

